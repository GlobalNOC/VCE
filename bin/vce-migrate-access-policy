#!/usr/bin/perl

use strict;
use warnings;

use GRNOC::Config;
use Data::Dumper;
use DBI;
use VCE::Database::Connection;


sub _process_config {
    my $config = shift;

    if ($config->validate() != 1) {
        my $err = $config->get_error()->{'backtrace'}->{'message'};
        exit 1;
    }

    my %workgroups;
    my %users;

    my $wgs = $config->get('/accessPolicy/workgroup');
    foreach my $workgroup (@$wgs){
        my $grp = {};
        $grp->{'name'} = $workgroup->{'name'};
        $grp->{'admin'} = $workgroup->{'admin'};
        $grp->{'description'} = $workgroup->{'description'};
        $grp->{'user'} = $workgroup->{'user'};
        $workgroups{$grp->{'name'}} = $grp;
        foreach my $user (keys(%{$grp->{'user'}})){
            if(!defined($users{$user})){
                $users{$user} = ();
            }
            push(@{$users{$user}},$grp->{'name'});
        }
    }

    my $cfg = {};
    $cfg->{'users'} = \%users;
    $cfg->{'workgroups'} = \%workgroups;

    my %switches;
    my $switches = $config->get('/accessPolicy/switch');

    foreach my $switch (@$switches){
        my $s = {};
        $s->{'name'} = $switch->{'name'};
        $s->{'description'} = $switch->{'description'};
        $s->{'ssh_port'} = $switch->{'ssh_port'};
        $s->{'vendor'} = $switch->{'vendor'};
        $s->{'model'} = $switch->{'model'};
        $s->{'version'} = $switch->{'version'};
        $s->{'ip'} = $switch->{'ip'};

        $s->{'commands'} = _process_command_config($switch->{'commands'}->[0]);

        my %ports;
        foreach my $port (keys(%{$switch->{'port'}})){
            my $p = {};
            my %tags;

            foreach my $tag (@{$switch->{'port'}->{$port}->{'tags'}}){
                for(my $i=$tag->{'start'};$i<=$tag->{'end'};$i++){
                    $tags{$i} = $tag->{'workgroup'};
                }
            }

            $p->{'tags'} = $switch->{'port'}->{$port}->{'tags'}; #\%tags;
            $s->{'ports'}->{$port} = $p;
            $p->{'owner'} = $switch->{'port'}->{$port}->{'owner'};
            $p->{'description'} = $switch->{'port'}->{$port}->{'description'};
        }

        $switches{$switch->{'name'}} = $s;
    }

    $cfg->{'switches'} = \%switches;
    return $cfg;
}

sub _process_command_config{
    my $config = shift;
    my $cfg = {};

    foreach my $type ("system","port","vlan"){
        my %commands = %{$config->{$type}->[0]->{'command'}};
        foreach my $cmd (keys(%commands)){

            if (defined $commands{$cmd}{context} && $commands{$cmd}{context} ne '') {
                $commands{$cmd}{cmd}->[0] = $commands{$cmd}{context} . '; ' . $commands{$cmd}{cmd}->[0];
            }
            if (defined $commands{$cmd}{configure} && $commands{$cmd}{configure} eq 'true') {
                $commands{$cmd}{cmd}->[0] = 'conf t; ' . $commands{$cmd}{cmd}->[0];
            }

            my $val = {
                name => $cmd,
                method_name => $commands{$cmd}{'method_name'},
                interaction => $commands{$cmd}{'interaction'},
                actual_command => $commands{$cmd}{'cmd'}->[0],
                type => $commands{$cmd}{'type'},
                configure => $commands{$cmd}{'configure'},
                params => $commands{$cmd}{'parameter'},
                description => $commands{$cmd}{'description'},
                context => $commands{$cmd}{'context'},
                user_type => $commands{$cmd}{'user_type'} || 'admin'
            };
            if(!defined($val->{'configure'})){
                delete $val->{'configure'};
            }

            if(!defined($val->{'context'})){
                delete $val->{'context'};
            }

            push(@{$cfg->{$type}},$val);
        }
    }

    return $cfg;
}

sub load_workgroups {
    my $conf = shift;
    my $db = shift;

    my $workgroups = $conf->{workgroups};
    foreach my $key (keys %$workgroups) {
        my $wg = $workgroups->{$key};
        my ($r, $err) = $db->add_workgroup($wg->{name}, $wg->{description});
    }

    my $db_workgroups = $db->get_workgroups();

    my $wg2id = {};
    foreach my $wg (@$db_workgroups) {
        $wg2id->{$wg->{name}} = $wg->{id};
    }

    return $wg2id;
}

sub load_users {
    my $conf = shift;
    my $db = shift;
    my $wg2id = shift;

    my $users = $conf->{users};

    foreach my $key (keys %$users) {
        my $u = $users->{$key};
        my $u_id = $db->add_user($key, '', '');

        foreach my $wg (@$u) {
            my $wg_id = $wg2id->{$wg};
            my $u_wg_id = $db->add_user_to_workgroup($u_id, $wg_id, 'admin');
        }
    }

    my $db_users = $db->get_users();

    my $user2id = {};
    foreach my $user (@$db_users) {
        $user2id->{$user->{username}} = $user->{id};
    }
    return $user2id;
}

sub load_switches {
    my $conf = shift;
    my $db = shift;

    my $switches = $conf->{switches};
    my $sw2id = {};
    my $intf2id = {};

    foreach my $key (keys %$switches) {
        my $sw = $switches->{$key};

        my ($sw_id, $err) = $db->add_switch(
            $sw->{name},
            $sw->{description},
            $sw->{ip},
            $sw->{ssh_port},
            830,
            $sw->{vendor},
            $sw->{model},
            $sw->{version}
        );
        $sw2id->{$sw->{name}} = $sw_id;

        foreach my $pname (keys %{$sw->{ports}}) {
            my $p = $sw->{ports}->{$pname};
            my $w = $db->get_workgroup(name => $p->{owner});

            my ($intf_id, $err) = $db->add_interface(
                name => $pname,
                description => $p->{description} || '',
                switch_id => $sw_id,
                workgroup_id => $w->{id}
            );
            $intf2id->{$sw->{name}}->{$pname} = $intf_id;

            foreach my $acl (@{$p->{tags}}) {
                my $w2 = $db->get_workgroup(name => $acl->{workgroup});
                if (!defined $w2->{id}) {
                    warn "Skipping ACL for workgroup $acl->{workgroup}. Workgroup doesn't exist.";
                    next;
                }

                $db->add_acl($w2->{id}, $intf_id, $acl->{start}, $acl->{end});
            }
        }

        my $cmds = $db->get_commands();
        my $cmd2id = {};
        foreach my $cmd (@$cmds) {
            $cmd2id->{$cmd->{template}} = $cmd->{id};
        }

        my $port_commands = $sw->{commands}->{port};
        foreach my $cmd (@$port_commands) {
            if (defined $cmd2id->{$cmd->{actual_command}}) {
                $db->add_command_to_switch($cmd2id->{$cmd->{actual_command}}, $sw_id, $cmd->{user_type});
                next;
            }
            my $operation = 'read';
            if (defined $cmd->{type} && $cmd->{type} eq 'action') {
                $operation = 'write';
            }
            my $cmd_id = $db->add_command($cmd->{name}, $cmd->{description}, $operation, 'interface', $cmd->{actual_command});
            foreach my $name (keys %{$cmd->{params}}) {
                my $type = $cmd->{params}->{$name}->{type} eq 'select' ? 'option' : 'input';
                $db->add_parameter(
                    $cmd_id,
                    $name,
                    $cmd->{params}->{$name}->{description},
                    $cmd->{params}->{$name}->{pattern},
                    $type
                );
            }
            $db->add_command_to_switch($cmd_id, $sw_id, $cmd->{user_type});
        }

        $port_commands = $sw->{commands}->{system};
        foreach my $cmd (@$port_commands) {
            if (defined $cmd2id->{$cmd->{actual_command}}) {
                $db->add_command_to_switch($cmd2id->{$cmd->{actual_command}}, $sw_id, $cmd->{user_type});
                next;
            }
            my $operation = 'read';
            if (defined $cmd->{type} && $cmd->{type} eq 'action') {
                $operation = 'write';
            }
            my $cmd_id = $db->add_command($cmd->{name}, $cmd->{description}, $operation, 'switch', $cmd->{actual_command});
            foreach my $name (keys %{$cmd->{params}}) {
                my $type = $cmd->{params}->{$name}->{type} eq 'select' ? 'option' : 'input';
                $db->add_parameter(
                    $cmd_id,
                    $name,
                    $cmd->{params}->{$name}->{description},
                    $cmd->{params}->{$name}->{pattern},
                    $type
                );
            }
            $db->add_command_to_switch($cmd_id, $sw_id, $cmd->{user_type});
        }

        $port_commands = $sw->{commands}->{vlan};
        foreach my $cmd (@$port_commands) {
            if (defined $cmd2id->{$cmd->{actual_command}}) {
                $db->add_command_to_switch($cmd2id->{$cmd->{actual_command}}, $sw_id, $cmd->{user_type});
                next;
            }
            my $operation = 'read';
            if (defined $cmd->{type} && $cmd->{type} eq 'action') {
                $operation = 'write';
            }
            my $cmd_id = $db->add_command($cmd->{name}, $cmd->{description}, $operation, 'vlan', $cmd->{actual_command});
            foreach my $name (keys %{$cmd->{params}}) {
                my $type = $cmd->{params}->{$name}->{type} eq 'select' ? 'option' : 'input';
                $db->add_parameter(
                    $cmd_id,
                    $name,
                    $cmd->{params}->{$name}->{description},
                    $cmd->{params}->{$name}->{pattern},
                    $type
                );
            }
            $db->add_command_to_switch($cmd_id, $sw_id, $cmd->{user_type});
        }
    }

    return ($sw2id, $intf2id);
}

sub load_existing_interfaces {
    my $db = shift;
    my $old_db = shift;
    my $sw2id = shift;
    my $intf2id = shift;

    my $query = $old_db->prepare('select * from interface');
    $query->execute();
    my $old_intfs = $query->fetchall_arrayref({});

    foreach my $ointf (@{$old_intfs}) {
        my $id = $intf2id->{$ointf->{switch}}->{$ointf->{name}};
        if (defined $id) {
            $db->update_interface(
                id => $id,
                admin_up => $ointf->{admin_status},
                description => $ointf->{description},
                hardware_type => $ointf->{hardware_type},
                link_up => $ointf->{status},
                mac_addr => $ointf->{mac_addr},
                mtu => $ointf->{mtu},
                speed => $ointf->{speed}
            );
        } else {
            my $nid = $db->add_interface(
                switch_id => $sw2id->{$ointf->{switch}},
                admin_up => $ointf->{admin_status},
                description => $ointf->{description},
                hardware_type => $ointf->{hardware_type},
                link_up => $ointf->{status},
                mac_addr => $ointf->{mac_addr},
                mtu => $ointf->{mtu},
                speed => $ointf->{speed},
                name => $ointf->{name}
            );
            $intf2id->{$ointf->{switch}}->{$ointf->{name}} = $nid;
        }
    }
}

sub load_existing_vlans {
    my $db = shift;
    my $old_db = shift;
    my $user2id = shift;
    my $wg2id = shift;
    my $intf2id = shift;
    my $sw2id = shift;

    my $old_vlans = [];

    my $query = $old_db->prepare(
        "select * from network
         left join vlan on network.id=vlan.network_id
         order by network.number asc"
    );
    $query->execute();
    my $endpoints = $query->fetchall_arrayref({});

    my $vlan  = {};

    foreach my $endpoint (@{$endpoints}) {
        if ($endpoint->{uuid} ne $vlan->{vlan_id}) {
            if (%{$vlan}) {
                push(@{$old_vlans}, $vlan);
            }
            $vlan = {
                create_time => $endpoint->{created},
                description => $endpoint->{description},
                endpoints   => [],
                status      => 'Active',
                switch      => $endpoint->{switch},
                username    => $endpoint->{username},
                vlan        => $endpoint->{number},
                vlan_id     => $endpoint->{uuid},
                workgroup   => $endpoint->{workgroup}
            };
        }
        if (!defined $endpoint->{interface}) {
            next;
        }
        my $info = {
            port => $endpoint->{interface}
        };
        push(@{$vlan->{endpoints}}, $info);
    }
    if (%{$vlan}) {
        push(@{$old_vlans}, $vlan);
    }

    foreach my $old_vlan (@{$old_vlans}) {
        my $sw = $old_vlan->{switch};
        my $tag = $old_vlan->{vlan};

        my $vlan_id = $db->add_vlan(
            name => $old_vlan->{description},
            number => $tag,
            description => $old_vlan->{description},
            created_by => $user2id->{$old_vlan->{username}},
            switch_id => $sw2id->{$sw},
            workgroup_id => $wg2id->{$old_vlan->{workgroup}},
            created_on => $old_vlan->{create_time}
        );

        foreach my $ep (@{$old_vlan->{endpoints}}) {
            $db->add_tag('tagged', $intf2id->{$sw}->{$ep->{port}}, $vlan_id);
        }
    }
}

sub main {
    my $old_db        = $ARGV[0] || '/var/lib/vce/network_model.sqlite';
    my $access_policy = $ARGV[1] || '/etc/vce/access_policy.xml';
    my $new_db        = $ARGV[2] || '/var/lib/vce/database.sqlite';

    `sqlite3 $new_db < /etc/vce/schema.sqlite`;
    `chmod 664 $new_db`;
    `chown vce:vce $new_db`;

    my $db1 = DBI->connect("dbi:SQLite:dbname=$old_db", undef, undef, {
        AutoCommit => 1,
        RaiseError => 1,
        sqlite_see_if_its_a_number => 1
    });
    my $db2 = VCE::Database::Connection->new($new_db);

    my $config = GRNOC::Config->new(
        config_file => $access_policy,
        force_array => 1,
        schema => '/etc/vce/config.xsd'
    );
    my $conf = _process_config($config);

    my $wg2id = load_workgroups($conf, $db2);
    my $user2id = load_users($conf, $db2, $wg2id);
    my ($sw2id, $intf2id) = load_switches($conf, $db2);

    load_existing_interfaces($db2, $db1, $sw2id, $intf2id);
    load_existing_vlans($db2, $db1, $user2id, $wg2id, $intf2id, $sw2id);

    return 1;
}

main();
